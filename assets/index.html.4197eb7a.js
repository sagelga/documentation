import{_ as n,o as s,c as a,e as t}from"./app.76739b9c.js";const e={},p=t(`<h1 id="apollo" tabindex="-1"><a class="header-anchor" href="#apollo" aria-hidden="true">#</a> Apollo</h1><p>Apollo is a GraphQL client. It performs GraphQL operations and returns results in JSON. We are using <code>apollo-client</code> as the main module for Apollo.</p><h2 id="initializing-apollo-client" tabindex="-1"><a class="header-anchor" href="#initializing-apollo-client" aria-hidden="true">#</a> Initializing Apollo Client</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// load required modules</span>
<span class="token keyword">const</span> ApolloClient <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;apollo-client&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ApolloClient<span class="token punctuation">;</span>
<span class="token keyword">const</span> InMemoryCache <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;apollo-cache-inmemory&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>InMemoryCache<span class="token punctuation">;</span>
<span class="token keyword">const</span> createHttpLink <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;apollo-link-http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>createHttpLink<span class="token punctuation">;</span>
<span class="token keyword">const</span> fetch <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;node-fetch&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> gql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;graphql-tag&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// create apollo object (don&#39;t forget to import globalVars)</span>
<span class="token keyword">const</span> apollo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApolloClient</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">link</span><span class="token operator">:</span> <span class="token function">createHttpLink</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">uri</span><span class="token operator">:</span> globalVars<span class="token punctuation">.</span>gqlURL<span class="token punctuation">,</span> <span class="token literal-property property">fetch</span><span class="token operator">:</span> fetch <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token literal-property property">cache</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">InMemoryCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="using-apollo" tabindex="-1"><a class="header-anchor" href="#using-apollo" aria-hidden="true">#</a> Using Apollo</h2><h3 id="simple-querying" tabindex="-1"><a class="header-anchor" href="#simple-querying" aria-hidden="true">#</a> Simple Querying</h3><p>Using Apollo is simple. Simply put a GraphQL query in the <code>query</code> object like the example below.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>apollo<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">query</span><span class="token operator">:</span> gql<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[GraphQL query here]</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>It then returns a JavaScript object.</p><p><strong>Example:</strong> A function that sends a login request to the API and returns member information.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">getMember</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">usr<span class="token punctuation">,</span> pwd</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> apollo<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
		<span class="token literal-property property">query</span><span class="token operator">:</span> gql<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
			{
				login(username: &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>usr<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;, password: &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>pwd<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;) {
					member {
						id, username, firstName, lastName, email
					},
					token
				}
			}
		</span><span class="token template-punctuation string">\`</span></span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="querying-with-authentication" tabindex="-1"><a class="header-anchor" href="#querying-with-authentication" aria-hidden="true">#</a> Querying with Authentication</h3><p>Some queries require a bearer authentication token. This token is acquired when a user logs into the system (notice the <em>token</em> key in the example above). To use a token with Apollo, see the example below.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// load one more module</span>
<span class="token keyword">const</span> setContext <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;apollo-link-context&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setContext<span class="token punctuation">;</span>

<span class="token comment">// declare a sample token</span>
<span class="token keyword">let</span> amazingToken <span class="token operator">=</span> <span class="token string">&quot;thisissowrongonsomanylevels&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// add a token to the header</span>
<span class="token keyword">const</span> authLink <span class="token operator">=</span> <span class="token function">setContext</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> <span class="token punctuation">{</span> headers <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">authorization</span><span class="token operator">:</span> token <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">bearer</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>amazingToken<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// create apollo object</span>
<span class="token keyword">const</span> apollo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApolloClient</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">link</span><span class="token operator">:</span> authLink<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>
		<span class="token function">createHttpLink</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">uri</span><span class="token operator">:</span> globalVars<span class="token punctuation">.</span>gqlURL<span class="token punctuation">,</span> <span class="token literal-property property">fetch</span><span class="token operator">:</span> fetch <span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token literal-property property">cache</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">InMemoryCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// use apollo as normal</span>
apollo<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">query</span><span class="token operator">:</span> gql<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
		{
			space(id: &quot;a10ep-7g32a-kqn5x&quot;) {
				id, name, description, capacity, isAvailable
			}
		}
	</span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),o=[p];function l(i,c){return s(),a("div",null,o)}var u=n(e,[["render",l],["__file","index.html.vue"]]);export{u as default};
