import{_ as t,o as e,c as a,e as n}from"./app.76739b9c.js";const s={},r=n(`<h1 id="sheets-module" tabindex="-1"><a class="header-anchor" href="#sheets-module" aria-hidden="true">#</a> Sheets Module</h1><h2 id="getcellvalue" tabindex="-1"><a class="header-anchor" href="#getcellvalue" aria-hidden="true">#</a> <code>getCellValue()</code></h2><p>Get the cell value from the given columnNumber, rowNumber and sheetObject.</p><p>Data Type is determined by that cell data type. Returns &#39;&#39; when cell is empty or out of range</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">getCellValue</span><span class="token punctuation">(</span>columnNumber<span class="token operator">:</span> String <span class="token operator">|</span> Number<span class="token punctuation">,</span>
             <span class="token literal-property property">rowNumber</span><span class="token operator">:</span> String <span class="token operator">|</span> Number<span class="token punctuation">,</span>
             sheetObject<span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">&gt;</span> dataType String
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="input" tabindex="-1"><a class="header-anchor" href="#input" aria-hidden="true">#</a> Input</h3><table><thead><tr><th>Attribute</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>columnNumber</td><td><code>String / Number</code></td><td>column number in which that cell is located in</td></tr><tr><td>rowNumber</td><td><code>String / Number</code></td><td>row number in which that cell is located in</td></tr><tr><td>sheetObject</td><td><code>Object</code></td><td>sheet object that cell is located in</td></tr></tbody></table><h3 id="output" tabindex="-1"><a class="header-anchor" href="#output" aria-hidden="true">#</a> Output</h3><table><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>any</code></td><td>data type from input. Returns &#39;&#39; when the cell is empty or out of range.</td></tr></tbody></table><h2 id="getcolumnnumber" tabindex="-1"><a class="header-anchor" href="#getcolumnnumber" aria-hidden="true">#</a> <code>getColumnNumber()</code></h2><p>Retrieves the column number of that search query. Must be exact match to results in column number.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">getColumnNumber</span><span class="token punctuation">(</span>searchQuery<span class="token operator">:</span> String <span class="token operator">|</span> Number<span class="token punctuation">,</span>
                <span class="token literal-property property">args</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">rowNumber</span><span class="token operator">:</span> Number<span class="token punctuation">,</span> <span class="token literal-property property">sheetObject</span><span class="token operator">:</span> Object<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">&gt;</span> colNum<span class="token operator">:</span> Number
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="input-1" tabindex="-1"><a class="header-anchor" href="#input-1" aria-hidden="true">#</a> Input</h3><table><thead><tr><th>Attribute</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>searchQuery</td><td><code>String / Number</code></td><td>query of the search</td></tr><tr><td>args</td><td><code>Object</code></td><td>(optional) settings to the search</td></tr><tr><td>args.rowNumber</td><td><code>Number</code></td><td>specified the row number (for search to go to only 1 line, instead of all) (default : 1)</td></tr><tr><td>args.sheetObject</td><td><code>Object</code></td><td>specified the sheet that the search will be in. (default: sheet)</td></tr></tbody></table><h3 id="output-1" tabindex="-1"><a class="header-anchor" href="#output-1" aria-hidden="true">#</a> Output</h3><table><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>Number</code></td><td>column number. Returns Null when the search fails</td></tr></tbody></table><h2 id="getrowrange" tabindex="-1"><a class="header-anchor" href="#getrowrange" aria-hidden="true">#</a> <code>getRowRange()</code></h2><p>Retrieves the array of row from the sheet. Mostly used with other functions to retrieve single (or some) data from the range retrieval.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">getRowRange</span><span class="token punctuation">(</span>rowNumber<span class="token operator">:</span> Number<span class="token punctuation">,</span> <span class="token literal-property property">sheetObject</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="input-2" tabindex="-1"><a class="header-anchor" href="#input-2" aria-hidden="true">#</a> Input</h3><table><thead><tr><th>Attribute</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>rowNumber</td><td><code>String / Number</code></td><td>row number</td></tr><tr><td>sheetObject</td><td><code>Object</code></td><td>sheet that will retrieved in</td></tr></tbody></table><h3 id="output-2" tabindex="-1"><a class="header-anchor" href="#output-2" aria-hidden="true">#</a> Output</h3><table><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>[]</code></td><td>range</td></tr></tbody></table><h2 id="getcolumnrange" tabindex="-1"><a class="header-anchor" href="#getcolumnrange" aria-hidden="true">#</a> <code>getColumnRange()</code></h2><p>Retrieves the column value array from the sheetObject. Mostly used in functions that wants the data from the array.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">getColumnRange</span><span class="token punctuation">(</span>columnNumber<span class="token operator">:</span> Number<span class="token punctuation">,</span> <span class="token literal-property property">sheetObject</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="input-3" tabindex="-1"><a class="header-anchor" href="#input-3" aria-hidden="true">#</a> Input</h3><table><thead><tr><th>Attribute</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>columnNumber</td><td><code>String / Number</code></td><td>column number</td></tr><tr><td>sheetObject</td><td><code>Object</code></td><td>sheet that will be retrieved from</td></tr></tbody></table><h3 id="output-3" tabindex="-1"><a class="header-anchor" href="#output-3" aria-hidden="true">#</a> Output</h3><table><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>[]</code></td><td>array with the value in that column number</td></tr></tbody></table><h2 id="pullvalue" tabindex="-1"><a class="header-anchor" href="#pullvalue" aria-hidden="true">#</a> <code>pullValue()</code></h2><p>Pulls the value from the given cell value (in <code>response</code> object) and store it into the <code>response</code> object.</p><p>Real definition of this function is to pull the data from the given cell value, but just using <code>response</code> to pull the cell value from and store it in the <code>response</code> object.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">pullValue</span><span class="token punctuation">(</span>response<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="input-4" tabindex="-1"><a class="header-anchor" href="#input-4" aria-hidden="true">#</a> Input</h3><table><thead><tr><th>Attribute</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>response</td><td><code>Object</code></td><td>response object of that row number.</td></tr></tbody></table><h3 id="output-4" tabindex="-1"><a class="header-anchor" href="#output-4" aria-hidden="true">#</a> Output</h3><table><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>{}</code></td><td>updated response</td></tr></tbody></table><h2 id="pushvalue" tabindex="-1"><a class="header-anchor" href="#pushvalue" aria-hidden="true">#</a> <code>pushValue()</code></h2><p>Store the <code>value</code> (as given) to the cell, using the values in the <code>response</code> object.</p><p>Response key is required (given as <code>response</code>) in order to retrieve its cell value, using <code>setCellValue()</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">pushValue</span><span class="token punctuation">(</span>response<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> any<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="input-5" tabindex="-1"><a class="header-anchor" href="#input-5" aria-hidden="true">#</a> Input</h3><table><thead><tr><th>Attribute</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>response</td><td><code>Object</code></td><td>response key (will retrieve cell from that</td></tr><tr><td>value</td><td><code>any</code></td><td>new value of that given cell</td></tr></tbody></table><h2 id="setcellvalue" tabindex="-1"><a class="header-anchor" href="#setcellvalue" aria-hidden="true">#</a> <code>setCellValue()</code></h2><p>Set the cell value to a given value, by using the cell value given as a1Notation.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">setCellValue</span><span class="token punctuation">(</span>a1Notation<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token literal-property property">sheetObject</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="input-6" tabindex="-1"><a class="header-anchor" href="#input-6" aria-hidden="true">#</a> Input</h3><table><thead><tr><th>Attribute</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>a1Notation</td><td><code>String</code></td><td>cell value, noted in A1Notation</td></tr><tr><td>value</td><td><code>any</code></td><td>value of the cell will be</td></tr><tr><td>sheetObject</td><td><code>Object</code></td><td>sheet that the cell value is in (default : sheet)</td></tr></tbody></table><h3 id="output-5" tabindex="-1"><a class="header-anchor" href="#output-5" aria-hidden="true">#</a> Output</h3><table><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>{}</code></td><td>updated response</td></tr></tbody></table><h2 id="createnewcolumn" tabindex="-1"><a class="header-anchor" href="#createnewcolumn" aria-hidden="true">#</a> <code>createNewColumn()</code></h2><p>Create a new column with the header name of name and settings with args object.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">createNewColumn</span><span class="token punctuation">(</span>name<span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token literal-property property">args</span><span class="token operator">:</span> <span class="token punctuation">{</span>columnNumber<span class="token punctuation">,</span> appendAfter<span class="token punctuation">,</span> sheetObject<span class="token punctuation">,</span> checkExistence<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="input-7" tabindex="-1"><a class="header-anchor" href="#input-7" aria-hidden="true">#</a> Input</h3><table><thead><tr><th>Attribute</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>name</td><td><code>String</code></td><td>value of the header label</td></tr><tr><td>args</td><td><code>any</code></td><td></td></tr><tr><td>args.columnNumber</td><td><code>Object</code></td><td>column number that it will append to</td></tr><tr><td>args.appendAfter</td><td><code>Boolean </code></td><td>if this true, the appended column will be at columnNumber + 1</td></tr><tr><td>args.sheetObject</td><td><code>Object</code></td><td>sheet that the column will be append from</td></tr><tr><td>args.checkExistance</td><td><code>Boolean </code></td><td>check whether the header is already exist or not. If it already exists, then do not create new column.</td></tr></tbody></table>`,56),o=[r];function d(c,p){return e(),a("div",null,o)}var l=t(s,[["render",d],["__file","index.html.vue"]]);export{l as default};
