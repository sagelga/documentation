import{_ as t,o as e,c as a,e as n}from"./app.76739b9c.js";const s={},d=n(`<h1 id="email-function-module" tabindex="-1"><a class="header-anchor" href="#email-function-module" aria-hidden="true">#</a> Email Function Module</h1><h2 id="getsubjectfield" tabindex="-1"><a class="header-anchor" href="#getsubjectfield" aria-hidden="true">#</a> <code>getSubjectField()</code></h2><p>Generates the subject field for the email sending procedure. Retrieves the information about the subject format from the <code>config</code> file, as they are composed from the <code>prefix</code> and <code>suffix</code> of each type of request.</p><p>Retrieves the <code>response ID</code> and <code>request type</code> from the <code>response</code> object.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">getSubjectField</span><span class="token punctuation">(</span>response<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">args</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">prefix</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token literal-property property">suffix</span><span class="token operator">:</span> String<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="input" tabindex="-1"><a class="header-anchor" href="#input" aria-hidden="true">#</a> Input</h3><table><thead><tr><th>Attribute</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>response</td><td><code>{}</code></td><td>a response that will email will send to</td></tr><tr><td>args</td><td><code>{}</code></td><td></td></tr><tr><td>args.prefix</td><td><code>String</code></td><td>Prefix for Subject Field</td></tr><tr><td>args.suffix</td><td><code>String</code></td><td>Suffix for Subject Field</td></tr></tbody></table><h2 id="getbodyfield" tabindex="-1"><a class="header-anchor" href="#getbodyfield" aria-hidden="true">#</a> <code>getBodyField()</code></h2><p>Retrieves the body (response information) from the sheet to compose an email body in the table format, then store the calculated body field to the response object.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">getBodyField</span><span class="token punctuation">(</span>rowNumber<span class="token operator">:</span> Number<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="input-1" tabindex="-1"><a class="header-anchor" href="#input-1" aria-hidden="true">#</a> Input</h3><table><thead><tr><th>Attribute</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>rowNumber</td><td><code>Number</code></td><td>row number that it will retrieve the data from</td></tr></tbody></table><h3 id="output" tabindex="-1"><a class="header-anchor" href="#output" aria-hidden="true">#</a> Output</h3><table><thead><tr><th>Attribute</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>body</td><td><code>String</code></td><td>body of the email, in a HTML format</td></tr></tbody></table><h2 id="sendemails" tabindex="-1"><a class="header-anchor" href="#sendemails" aria-hidden="true">#</a> <code>sendEmails()</code></h2><p>Send emails to the given recipient.</p><p>This script is using <code>MailApp</code> object, which is 100% on Google Apps Script.</p><p>User that runs the script is the &#39;send from&#39; . In the production, you should have another email address space to run this script and they are the one sending emails.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">sendEmails</span><span class="token punctuation">(</span>toAddress<span class="token operator">:</span> String <span class="token operator">|</span> Array<span class="token punctuation">,</span> <span class="token literal-property property">subject</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token literal-property property">body</span><span class="token operator">:</span> String<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="input-2" tabindex="-1"><a class="header-anchor" href="#input-2" aria-hidden="true">#</a> Input</h3><table><thead><tr><th>Attribute</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>toAddress</td><td>\`String</td><td>Array\`</td></tr><tr><td>subject</td><td><code>String</code></td><td>subject of the email</td></tr><tr><td>body</td><td><code>String</code></td><td>body of the email</td></tr></tbody></table><h3 id="output-1" tabindex="-1"><a class="header-anchor" href="#output-1" aria-hidden="true">#</a> Output</h3><table><thead><tr><th>Attribute</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>body</td><td><code>String</code></td><td>body of the email, in a HTML format</td></tr></tbody></table>`,23),r=[d];function o(i,p){return e(),a("div",null,r)}var l=t(s,[["render",o],["__file","index.html.vue"]]);export{l as default};
