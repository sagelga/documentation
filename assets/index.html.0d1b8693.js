import{_ as e,o as r,c as t,e as a}from"./app.76739b9c.js";const n={},i=a(`<h1 id="utility-module" tabindex="-1"><a class="header-anchor" href="#utility-module" aria-hidden="true">#</a> Utility Module</h1><h2 id="columntoletter-column-string-number-letter-string" tabindex="-1"><a class="header-anchor" href="#columntoletter-column-string-number-letter-string" aria-hidden="true">#</a> <code>columnToLetter(column: String|Number) --&gt; letter: String</code></h2><p>Converts column number (a number) to a letter. A is equals to 1 and so on.</p><h2 id="lettertocolumn-letter-string-colnum-number" tabindex="-1"><a class="header-anchor" href="#lettertocolumn-letter-string-colnum-number" aria-hidden="true">#</a> <code>letterToColumn(letter: String) --&gt; colNum: Number</code></h2><p>Converts column letter to a column number. A reverse of <code>columnToLetter()</code></p><h2 id="arraytocomma-arrays-csv-string" tabindex="-1"><a class="header-anchor" href="#arraytocomma-arrays-csv-string" aria-hidden="true">#</a> <code>arrayToComma(arrays: []) --&gt; csv: String</code></h2><p>Converts 1 dimension arrays (normal ones) to String by dividing it via &#39;, &#39; to separate the string values in different array list</p><h2 id="rangetoarray-array-array" tabindex="-1"><a class="header-anchor" href="#rangetoarray-array-array" aria-hidden="true">#</a> <code>rangeToArray(array: []) --&gt; array: []</code></h2><p>Converts range (2 dimensional array) to Array. Mostly used with 2d array that have only 1 dimension on (eg. <code>[1,]</code>)</p><h2 id="milisectotime-time-number-time-string" tabindex="-1"><a class="header-anchor" href="#milisectotime-time-number-time-string" aria-hidden="true">#</a> <code>milisecToTime(time: Number) --&gt; time: String</code></h2><p>Converts milliseconds to string that is in &#39;DDd HHh MMm&#39; format.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>milisecToTime(10000000);
=&gt; &#39;0d 02h 47m&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,12),o=[i];function d(s,c){return r(),t("div",null,o)}var m=e(n,[["render",d],["__file","index.html.vue"]]);export{m as default};
